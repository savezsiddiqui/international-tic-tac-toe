{"version":3,"sources":["index.js"],"names":["Square","_ref","value","onClick","id","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","type","className","Board","props","matrix","squares","map","square","i","key","Game","state","history","Array","fill","xIsNext","stepNumber","this","length","slice","calculateWinner","setBackground","setState","concat","document","getElementsByClassName","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","element","style","background","err","return","filter","index","status","_this2","current","winner","movesX","move","desc","toString","react_bootstrap__WEBPACK_IMPORTED_MODULE_8__","jumpTo","movesO","react_bootstrap__WEBPACK_IMPORTED_MODULE_9__","react_bootstrap__WEBPACK_IMPORTED_MODULE_10__","react_bootstrap__WEBPACK_IMPORTED_MODULE_11__","xs","span","order","sm","handleClick","React","Component","highlightWinner","b","c","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","border","lines","_lines$i","Object","_home_savez_my_game_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","tie","ReactDOM","render","getElementById"],"mappings":"sPAKMA,SAAS,SAAAC,GAA2B,IAAxBC,EAAwBD,EAAxBC,MAAOC,EAAiBF,EAAjBE,QAASC,EAAQH,EAARG,GAC9B,OACIC,EAAAC,EAAAC,cAAA,UACIH,GAAIA,EACJI,KAAK,SACLL,QAASA,EACTM,UAAU,0BAETP,KAKPQ,EAAQ,SAACC,GAEX,IAAMC,EAASD,EAAME,QAAQC,IAAI,SAACC,EAAQC,GACtC,OACIX,EAAAC,EAAAC,cAACP,EAAD,CACII,GAAIY,EACJC,IAAKD,EACLd,MAAOS,EAAME,QAAQG,GACrBb,QAAS,kBAAMQ,EAAMR,QAAQa,QAKzC,OACIX,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBACVG,IAKPM,6MAEFC,MAAQ,CACJC,QAAS,CAAC,CACNP,QAASQ,MAAM,GAAGC,KAAK,QAE3BC,SAAS,EACTC,WAAY,8EAGJR,GACR,IAAMI,EAAUK,KAAKN,MAAMC,QAErBP,EADUO,EAAQA,EAAQM,OAAS,GACjBb,QAAQc,QAC5BC,EAAgBf,IAAYA,EAAQG,KAGxCS,KAAKI,gBACLhB,EAAQG,GAAKS,KAAKN,MAAMI,QAAU,IAAM,IACxCE,KAAKK,SAAS,CACVV,QAASA,EAAQW,OAAO,CAAC,CACrBlB,QAASA,KAEbU,SAAUE,KAAKN,MAAMI,mDAMzB,IAAIV,EAAUmB,SAASC,uBAAuB,UAFlCC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAIZ,QAAAC,EAAAC,EAAoB1B,EAApB2B,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA6B,KAApBU,EAAoBN,EAAApC,MACrBuB,KAAKN,MAAMI,QACXqB,EAAQC,MAAMC,WAAa,UAG3BF,EAAQC,MAAMC,WAAa,WATvB,MAAAC,GAAAZ,GAAA,EAAAC,EAAAW,EAAA,YAAAb,GAAA,MAAAK,EAAAS,QAAAT,EAAAS,SAAA,WAAAb,EAAA,MAAAC,mCAcTpB,GACHS,KAAKK,SAAS,CACVN,WAAYR,EACZI,QAASK,KAAKN,MAAMC,QAAQ6B,OAAO,SAACpC,EAASqC,GAAV,OAC/BA,EAAQlC,IACZO,QAASE,KAAKN,MAAMK,WAAa,IAAM,qCAKtC,IAyBD2B,EAzBCC,EAAA3B,KACCL,EAAUK,KAAKN,MAAMC,QACrBiC,EAAUjC,EAAQA,EAAQM,OAAS,GACnC4B,EAAS1B,EAAgByB,EAAQxC,SAEjC0C,EAASnC,EAAQN,IAAI,SAAC0C,EAAMxC,GAC9B,IAAMyC,EAAO,kBAAoBzC,EAAE0C,WACnC,GAAI1C,EAAI,IAAM,EACV,OACIX,EAAAC,EAAAC,cAAA,MAAIU,IAAKD,GACLX,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAQxD,QAAS,kBAAMiD,EAAKQ,OAAO5C,KAAnC,IAA0CyC,MAKpDI,EAASzC,EAAQN,IAAI,SAAC0C,EAAMxC,GAC9B,IAAMyC,EAAO,kBAAoBzC,EAAE0C,WACnC,GAAU,IAAN1C,GAAWA,EAAI,IAAM,EACrB,OACIX,EAAAC,EAAAC,cAAA,MAAIU,IAAKD,GACLX,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAQxD,QAAS,kBAAMiD,EAAKQ,OAAO5C,KAAnC,IAA0CyC,MAgB1D,OATIN,EADW,MAAXG,GAA6B,MAAXA,EACT,WAAaA,EAEN,QAAXA,EACI,OAGA,iBAAmB7B,KAAKN,MAAMI,QAAU,IAAM,KAIvDlB,EAAAC,EAAAC,cAACuD,EAAA,EAAD,KACIzD,EAAAC,EAAAC,cAACwD,EAAA,EAAD,KAEI1D,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,GAAIC,MAAO,GAAKC,GAAI,CAAEF,KAAM,EAAGC,MAAO,GACnD1D,UAAU,eAEVJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,QAAd,gBACAJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,iBAAiB8C,IAGnClD,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,GAAIC,MAAO,GAAKC,GAAI,CAAEF,KAAM,EAAGC,MAAO,GAAK1D,UAAU,eAClEJ,EAAAC,EAAAC,cAAA,UAAK4C,GACL9C,EAAAC,EAAAC,cAACG,EAAD,CACIG,QAASwC,EAAQxC,QACjBV,QAAS,SAACa,GAAQoC,EAAKiB,YAAYrD,OAI3CX,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,GAAIC,MAAO,GAAKC,GAAI,CAAEF,KAAM,EAAGC,MAAO,GACnD1D,UAAU,eAEVJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,QAAd,gBACAJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,iBAAiBoD,aA9GpCS,IAAMC,WAsHzB,SAASC,EAAgBlE,EAAGmE,EAAGC,GAE3B,IAAI7D,EAAUmB,SAASC,uBAAuB,UAFhB0C,GAAA,EAAAC,GAAA,EAAAC,OAAAxC,EAAA,IAG9B,QAAAyC,EAAAC,EAAkBlE,EAAlB2B,OAAAC,cAAAkC,GAAAG,EAAAC,EAAArC,QAAAC,MAAAgC,GAAA,EAA2B,KAAnB5D,EAAmB+D,EAAA5E,MACpBa,EAAOX,IAAME,GAAKS,EAAOX,IAAMqE,GAAK1D,EAAOX,IAAMsE,IAChD3D,EAAO8B,MAAMmC,OAAS,mBALA,MAAAjC,GAAA6B,GAAA,EAAAC,EAAA9B,EAAA,YAAA4B,GAAA,MAAAI,EAAA/B,QAAA+B,EAAA/B,SAAA,WAAA4B,EAAA,MAAAC,IAUlC,SAASjD,EAAgBf,GAWrB,IAVA,IAAMoE,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFjE,EAAI,EAAGA,EAAIiE,EAAMvD,OAAQV,IAAK,KAAAkE,EAAAC,OAAAC,EAAA,EAAAD,CACjBF,EAAMjE,GADW,GAC5BV,EAD4B4E,EAAA,GACzBT,EADyBS,EAAA,GACtBR,EADsBQ,EAAA,GAEnC,GAAIrE,EAAQP,IAAMO,EAAQP,KAAOO,EAAQ4D,IAAM5D,EAAQP,KAAOO,EAAQ6D,GAElE,OADAF,EAAgBlE,EAAGmE,EAAGC,GACf7D,EAAQP,GAMvB,IAFA,IAAI+E,GAAM,EAEDrE,EAAI,EAAGA,EAAIH,EAAQa,OAAQV,IAChC,GAAmB,OAAfH,EAAQG,GAAa,CACrBqE,GAAM,EACN,MAIR,OAAY,IAARA,EACO,MAEA,KAKfC,IAASC,OACLlF,EAAAC,EAAAC,cAACW,EAAD,MACAc,SAASwD,eAAe","file":"static/js/main.2e2afb47.chunk.js","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Container, Row, Col, Button } from 'react-bootstrap'\nimport './index.css'\n\nconst Square = ({ value, onClick, id}) => {\n    return (\n        <button\n            id={id}\n            type=\"button\"\n            onClick={onClick}\n            className=\"btn btn-default square\"\n        >\n            {value}\n        </button>\n    )\n}\n\nconst Board = (props) => {\n\n    const matrix = props.squares.map((square, i) => {\n        return (\n            <Square\n                id={i}\n                key={i}\n                value={props.squares[i]}\n                onClick={() => props.onClick(i)}\n            />\n        )\n    })\n\n    return (\n        <div className=\"btn-group btn-matrix\">\n            {matrix}\n        </div>\n    )\n}\n\nclass Game extends React.Component {\n\n    state = {\n        history: [{\n            squares: Array(9).fill(null),\n        }],\n        xIsNext: true,\n        stepNumber: 0\n    }\n\n    handleClick(i) {\n        const history = this.state.history;\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        this.setBackground()\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n            }]),\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    setBackground() {\n\n        let squares = document.getElementsByClassName('square')\n\n        for (let element of squares) {\n            if (this.state.xIsNext) {\n                element.style.background = '#424242'\n            }\n            else {\n                element.style.background = '#37474f'\n            }\n        }\n    }\n\n    jumpTo(i) {\n        this.setState({\n            stepNumber: i,\n            history: this.state.history.filter((squares, index) =>\n                index < i),\n            xIsNext: this.state.stepNumber % 2 === 0 ? true : false\n        })\n    }\n\n\n    render() {\n        const history = this.state.history;\n        const current = history[history.length - 1];\n        const winner = calculateWinner(current.squares);\n\n        const movesX = history.map((move, i) => {\n            const desc = 'Undo till Move ' + i.toString()\n            if (i % 2 !== 0)\n                return (\n                    <li key={i}>\n                        <Button onClick={() => this.jumpTo(i)} > {desc}</ Button>\n                    </li>\n                )\n        })\n\n        const movesO = history.map((move, i) => {\n            const desc = 'Undo till Move ' + i.toString()\n            if (i !== 0 && i % 2 === 0)\n                return (\n                    <li key={i}>\n                        <Button onClick={() => this.jumpTo(i)} > {desc}</ Button>\n                    </li>\n                )\n        })\n\n        let status;\n        if (winner === 'X' || winner === 'O') {\n            status = 'Winner: ' + winner;\n        }\n        else if (winner === 'tie') {\n            status = 'Draw'\n        }\n        else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        return (\n            <Container>\n                <Row>\n\n                    <Col xs={{ span: 12, order: 2 }} sm={{ span: 3, order: 1 }}\n                        className='text-center'\n                    >\n                        <h4 className='mt-3'>Prev X Moves</h4>\n                        <ul className='list-unstyled'>{movesX}</ul>\n                    </Col>\n\n                    <Col xs={{ span: 12, order: 1 }} sm={{ span: 6, order: 2 }} className='text-center'>\n                        <h3>{status}</h3>\n                        <Board\n                            squares={current.squares}\n                            onClick={(i) => { this.handleClick(i) }}\n                        />\n                    </Col>\n\n                    <Col xs={{ span: 12, order: 3 }} sm={{ span: 3, order: 3 }}\n                        className='text-center'\n                    >\n                        <h4 className='mt-3'>Prev O Moves</h4>\n                        <ul className='list-unstyled'>{movesO}</ul>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n\nfunction highlightWinner(a, b, c) {\n\n    let squares = document.getElementsByClassName('square')\n    for(let square of squares) {\n        if(square.id == a || square.id == b || square.id == c) {\n            square.style.border = '1px solid gold'\n        }\n    }\n}\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            highlightWinner(a, b, c)\n            return squares[a];\n        }\n    }\n\n    let tie = true;\n\n    for (let i = 0; i < squares.length; i++) {\n        if (squares[i] === null) {\n            tie = false;\n            break;\n        }\n    }\n\n    if (tie === true)\n        return 'tie'\n    else\n        return null;\n}\n\n// ============================================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}